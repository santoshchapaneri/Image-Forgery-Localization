% This script was used to train the models. It
% requires the presence of TrainingFeature.mat, generated by
% ExtractTrainingFeatures.m

clear all;

tic;

load('TrainingFeature_C_16.mat');
rng('shuffle')

% The percentage of data to be used for training. If less than 1, the rest
% will be used for evaluation.
TrainRatio=1;

% for QualityInd=1:length(UnForgedFeatures)
%     nDoubleExamples=length(ForgedFeatures);
%     nSingleExamples=length(UnForgedFeatures);
    nDoubleExamples=size(ForgedFeatures,1);
    nSingleExamples=size(UnForgedFeatures,1);
    nTrainSingle=ceil(nSingleExamples*TrainRatio);
    nTrainDouble=ceil(nDoubleExamples*TrainRatio);
    
    
    
    %---Train without class balancing -this is the approach finally chosen
    Train_Data=[ForgedFeatures(1:nTrainDouble,:); UnForgedFeatures(1:nTrainSingle,:)];
    TrainLabels=[ones(nTrainDouble,1);zeros(nTrainSingle,1)];
    EvalData=[ForgedFeatures(nTrainDouble+1:end,:);UnForgedFeatures(nTrainSingle+1:end,:)];
    EvalLabels=[ones(nDoubleExamples-nTrainDouble,1);zeros(nSingleExamples-nTrainSingle,1)];
    
%     
    [x y]=size(Train_Data);
    mean_TrainData=mean(Train_Data);
    std_TrainData=std(Train_Data);
    mean_Traindata=repmat(mean_TrainData,x,1);
    std_Traindata=repmat(std_TrainData,x,1);
    TrainDataNorm=(Train_Data-mean_Traindata)./std_Traindata;
    EvalData=(Train_Data-mean_Traindata)./std_Traindata;
    
    alpha=1;
[model, llh] = rvmBinFp(TrainDataNorm', TrainLabels', alpha);

%     TrainDataNorm=Train_Data;
%     TrainData=TrainData/64;
%     EvalData=TrainData/64;
   
    
    RVMStruct = model;
% end
toc;

save('RVMs_C_16.mat','RVMStruct','mean_TrainData','std_TrainData');